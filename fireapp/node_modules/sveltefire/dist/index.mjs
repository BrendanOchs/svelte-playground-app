import firebase from 'firebase/app';

function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function subscribe(store, callback) {
    const unsub = store.subscribe(callback);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, fn) {
    return definition[1]
        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))
        : ctx.$$scope.ctx;
}
function get_slot_changes(definition, ctx, changed, fn) {
    return definition[1]
        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))
        : ctx.$$scope.changed || {};
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function text(data) {
    return document.createTextNode(data);
}
function empty() {
    return text('');
}
function children(element) {
    return Array.from(element.childNodes);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
    const component = current_component;
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function flush() {
    const seen_callbacks = new Set();
    do {
        // first, call beforeUpdate functions
        // and update components
        while (dirty_components.length) {
            const component = dirty_components.shift();
            set_current_component(component);
            update(component.$$);
        }
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                callback();
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
}
function update($$) {
    if ($$.fragment) {
        $$.update($$.dirty);
        run_all($$.before_update);
        $$.fragment.p($$.dirty, $$.ctx);
        $$.dirty = null;
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    if (component.$$.fragment) {
        run_all(component.$$.on_destroy);
        component.$$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        component.$$.on_destroy = component.$$.fragment = null;
        component.$$.ctx = {};
    }
}
function make_dirty(component, key) {
    if (!component.$$.dirty) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty = blank_object();
    }
    component.$$.dirty[key] = true;
}
function init(component, options, instance, create_fragment, not_equal, prop_names) {
    const parent_component = current_component;
    set_current_component(component);
    const props = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props: prop_names,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty: null
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, props, (key, ret, value = ret) => {
            if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {
                if ($$.bound[key])
                    $$.bound[key](value);
                if (ready)
                    make_dirty(component, key);
            }
            return ret;
        })
        : props;
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment($$.ctx);
    if (options.target) {
        if (options.hydrate) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.l(children(options.target));
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

/* src\FirebaseApp.svelte generated by Svelte v3.12.1 */

// (46:0) {#if ready}
function create_if_block(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, null),
					get_slot_context(default_slot_template, ctx, null)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	var if_block_anchor, current;

	var if_block = (ctx.ready) && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p(changed, ctx) {
			if (ctx.ready) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o(local) {
			transition_out(if_block);
			current = false;
		},

		d(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { config, perf = false, analytics = false } = $$props;
    // import 'firebase/firestore';
    // import 'firebase/auth';
    // import 'firebase/performance';
    // import 'firebase/storage';
    // import 'firebase/analytics';

    // Ready required to use the app event, 
    // prevents child components from running before init
    let ready = false;

    firebase.initializeApp(config);


    // perf && firebase.performance();
    // analytics && firebase.analytics();

    // Emit firebase
    const dispatch = createEventDispatcher();



    // Set firebase context
    setContext('firebase', firebase);

    onMount(() => {
        
        // Optional event to set additional config
        dispatch('initializeApp', {
		    firebase,
        });
        

        $$invalidate('ready', ready = true);
    });

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('config' in $$props) $$invalidate('config', config = $$props.config);
		if ('perf' in $$props) $$invalidate('perf', perf = $$props.perf);
		if ('analytics' in $$props) $$invalidate('analytics', analytics = $$props.analytics);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		config,
		perf,
		analytics,
		ready,
		$$slots,
		$$scope
	};
}

class FirebaseApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["config", "perf", "analytics"]);
	}
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

function getApp() {
  return getContext('firebase');
}

function userStore(opts = { persist: null }) {

    const auth = getApp().auth();
    const k = 'sveltefire_user';
    let cached = null;
  
    const { persist } = opts;
  
    if (persist) {
      cached = JSON.parse(opts.persist.getItem(k));
    }
  
    const store = writable(cached, () => {
      const teardown = auth.onAuthStateChanged(u => {
        set(u);
        persist && opts.persist.setItem(k, JSON.stringify(u));
      });
      return () => teardown;
    });
  
    const { subscribe, set } = store;
  
    return {
      subscribe,
      auth
    };
  }

/* src\User.svelte generated by Svelte v3.12.1 */

const get_signed_out_slot_changes = ({ $data, data }) => ({ user: $data });
const get_signed_out_slot_context = ({ $data, data }) => ({ user: $data, auth: data.auth });

const get_default_slot_changes = ({ $data, data }) => ({ user: $data });
const get_default_slot_context = ({ $data, data }) => ({ user: $data, auth: data.auth });

// (23:0) {:else}
function create_else_block(ctx) {
	var current;

	const signed_out_slot_template = ctx.$$slots["signed-out"];
	const signed_out_slot = create_slot(signed_out_slot_template, ctx, get_signed_out_slot_context);

	return {
		c() {
			if (signed_out_slot) signed_out_slot.c();
		},

		l(nodes) {
			if (signed_out_slot) signed_out_slot.l(nodes);
		},

		m(target, anchor) {
			if (signed_out_slot) {
				signed_out_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (signed_out_slot && signed_out_slot.p && (changed.$$scope || changed.$data)) {
				signed_out_slot.p(
					get_slot_changes(signed_out_slot_template, ctx, changed, get_signed_out_slot_changes),
					get_slot_context(signed_out_slot_template, ctx, get_signed_out_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(signed_out_slot, local);
			current = true;
		},

		o(local) {
			transition_out(signed_out_slot, local);
			current = false;
		},

		d(detaching) {
			if (signed_out_slot) signed_out_slot.d(detaching);
		}
	};
}

// (21:0) {#if $data}
function create_if_block$1(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && (changed.$$scope || changed.$data)) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, get_default_slot_changes),
					get_slot_context(default_slot_template, ctx, get_default_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	var current_block_type_index, if_block, if_block_anchor, current;

	var if_block_creators = [
		create_if_block$1,
		create_else_block
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$data) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},

		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o(local) {
			transition_out(if_block);
			current = false;
		},

		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let $data;

	
    
    let data = userStore(); component_subscribe($$self, data, $$value => { $data = $$value; $$invalidate('$data', $data); });

    const dispatch = createEventDispatcher();
    let unsub;
    onMount(() => {
        unsub = data.subscribe(user => {
            dispatch('user', {
                user
            });
        });
    });

    onDestroy(() => unsub());

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { data, $data, $$slots, $$scope };
}

class User extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, []);
	}
}

function startTrace(name) {
    const perf = getApp().performance();
    console.log(perf);
    const trace = perf.trace(name);
    trace.start();
    return trace;
  }
  
  async function stopTrace(trace) {
    if (trace.state === 2) {
      trace.stop();
    }
  
    return null;
  }

// Svelte Store for Firestore Document
function docStore(path, opts) {
  const firestore = getApp().firestore();

  const { startWith, log, traceId } = opts;

  const ref = typeof path === 'string' ? firestore.doc(path) : path;
  const trace = traceId && startTrace(traceId);

  let _loading = typeof startWith !== undefined;
  let _teardown;
  let _error;

  const emit = val => {
    _loading = false;
    set(val);
    trace && stopTrace(trace);
  };

  // Runs of first subscription
  const start = () => {
    _teardown = ref.onSnapshot(
      snapshot => {
        const data = snapshot.data() || startWith || null;
        if (log) {
          console.groupCollapsed(`Doc ${snapshot.id}`);
          console.log(`Path: ${ref.path}`);
          console.log('Snapshot:', snapshot);
          console.groupEnd();
        }

        emit(data);
      },
      error => {
        _error = error;
        console.error(error);
        emit(null);
      }
    );

    // Removes firebase listener when store completes
    return () => _teardown();
  };

  const store = writable(startWith, start);

  const { subscribe, set } = store;

  return {
    subscribe,
    firestore,
    ref,
    get loading() {
      return _loading;
    },
    get error() {
      return _error;
    }
  };
}

// Svelte Store for Firestore Collection
function collectionStore(path, queryFn, opts) {
  const firestore = getApp().firestore();

  const { startWith, log, traceId, idField, refField } = {
    idField: 'id',
    refField: 'ref',
    ...opts
  };

  const ref = typeof path === 'string' ? firestore.collection(path) : path;
  const query = queryFn && queryFn(ref);
  const trace = traceId && startTrace(traceId);

  let _loading = typeof startWith !== undefined;
  let _teardown;
  let _error;

  const emit = val => {
    _loading = false;
    set(val);
    trace && stopTrace(trace);
  };

  const start = () => {
    _teardown = (query || ref).onSnapshot(
      snapshot => {
        const data = snapshot.docs.map(docSnap => ({
          ...docSnap.data(),
          // Allow end user override fields mapped for ID and Ref
          ...(idField ? { [idField]: docSnap.id } : null),
          ...(refField ? { [refField]: docSnap.ref } : null)
        }));
        const len = data.length;
        if (log) {
          const type = _loading ? 'New Query' : 'Updated Query';
          console.groupCollapsed(`${type} ${ref.id} | ${len} hits`);
          console.log(`${ref.path}`);
          console.log(`Snapshot: `, snapshot);
          console.groupEnd();
        }

        emit(data);
      },

      error => {
        console.error(error);
        _error = error;
        emit(null);
      }
    );

    return () => _teardown();
  };

  const store = writable(startWith, start);
  const { subscribe, set } = store;

  return {
    subscribe,
    firestore,
    ref,
    get loading() {
      return _loading;
    },
    get error() {
      return _error;
    }
  };
}

/* src\Doc.svelte generated by Svelte v3.12.1 */

const get_fallback_slot_changes = ({ $data, data }) => ({ data: $data });
const get_fallback_slot_context = ({ $data, data }) => ({
	data: $data,
	ref: data.ref,
	firestore: data.firestore,
	error: data.error
});

const get_loading_slot_changes = ({ $data, data }) => ({ data: $data });
const get_loading_slot_context = ({ $data, data }) => ({
	data: $data,
	ref: data.ref,
	firestore: data.firestore,
	error: data.error
});

const get_default_slot_changes$1 = ({ $data, data }) => ({ data: $data });
const get_default_slot_context$1 = ({ $data, data }) => ({
	data: $data,
	ref: data.ref,
	firestore: data.firestore,
	error: data.error
});

// (36:0) {:else}
function create_else_block$1(ctx) {
	var current;

	const fallback_slot_template = ctx.$$slots.fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, get_fallback_slot_context);

	return {
		c() {
			if (fallback_slot) fallback_slot.c();
		},

		l(nodes) {
			if (fallback_slot) fallback_slot.l(nodes);
		},

		m(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (fallback_slot && fallback_slot.p && (changed.$$scope || changed.$data)) {
				fallback_slot.p(
					get_slot_changes(fallback_slot_template, ctx, changed, get_fallback_slot_changes),
					get_slot_context(fallback_slot_template, ctx, get_fallback_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},

		o(local) {
			transition_out(fallback_slot, local);
			current = false;
		},

		d(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};
}

// (34:23) 
function create_if_block_1(ctx) {
	var current;

	const loading_slot_template = ctx.$$slots.loading;
	const loading_slot = create_slot(loading_slot_template, ctx, get_loading_slot_context);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},

		l(nodes) {
			if (loading_slot) loading_slot.l(nodes);
		},

		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (loading_slot && loading_slot.p && (changed.$$scope || changed.$data)) {
				loading_slot.p(
					get_slot_changes(loading_slot_template, ctx, changed, get_loading_slot_changes),
					get_slot_context(loading_slot_template, ctx, get_loading_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},

		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},

		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (32:0) {#if $data}
function create_if_block$2(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, get_default_slot_context$1);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && (changed.$$scope || changed.$data)) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, get_default_slot_changes$1),
					get_slot_context(default_slot_template, ctx, get_default_slot_context$1)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$2(ctx) {
	var current_block_type_index, if_block, if_block_anchor, current;

	var if_block_creators = [
		create_if_block$2,
		create_if_block_1,
		create_else_block$1
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$data) return 0;
		if (ctx.data.loading) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},

		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o(local) {
			transition_out(if_block);
			current = false;
		},

		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let $data;

	let { path, log = false, traceId = '', startWith = undefined } = $$props;
    
    
    let data = docStore(path, { startWith, traceId, log }); component_subscribe($$self, data, $$value => { $data = $$value; $$invalidate('$data', $data); });

    // CUSTOM EVENTS

    const dispatch = createEventDispatcher();

    let unsub;

    onMount(() => {
        dispatch('ref', { ref: data.ref });

        unsub = data.subscribe(data => {
            dispatch('data', {
                data
            });
        });
    });

    onDestroy(() => unsub());

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('path' in $$props) $$invalidate('path', path = $$props.path);
		if ('log' in $$props) $$invalidate('log', log = $$props.log);
		if ('traceId' in $$props) $$invalidate('traceId', traceId = $$props.traceId);
		if ('startWith' in $$props) $$invalidate('startWith', startWith = $$props.startWith);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		path,
		log,
		traceId,
		startWith,
		data,
		$data,
		$$slots,
		$$scope
	};
}

class Doc extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, ["path", "log", "traceId", "startWith"]);
	}
}

/* src\Collection.svelte generated by Svelte v3.12.1 */

const get_fallback_slot_changes$1 = ({ $data, data }) => ({ data: $data });
const get_fallback_slot_context$1 = ({ $data, data }) => ({
	data: $data,
	ref: data.ref,
	firestore: data.firestore,
	error: data.error
});

const get_loading_slot_changes$1 = ({ $data, data }) => ({ data: $data });
const get_loading_slot_context$1 = ({ $data, data }) => ({
	data: $data,
	ref: data.ref,
	firestore: data.firestore,
	error: data.error
});

const get_default_slot_changes$2 = ({ $data, data }) => ({ data: $data });
const get_default_slot_context$2 = ({ $data, data }) => ({
	data: $data,
	ref: data.ref,
	firestore: data.firestore,
	error: data.error
});

// (37:0) {:else}
function create_else_block$2(ctx) {
	var current;

	const fallback_slot_template = ctx.$$slots.fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, get_fallback_slot_context$1);

	return {
		c() {
			if (fallback_slot) fallback_slot.c();
		},

		l(nodes) {
			if (fallback_slot) fallback_slot.l(nodes);
		},

		m(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (fallback_slot && fallback_slot.p && (changed.$$scope || changed.$data)) {
				fallback_slot.p(
					get_slot_changes(fallback_slot_template, ctx, changed, get_fallback_slot_changes$1),
					get_slot_context(fallback_slot_template, ctx, get_fallback_slot_context$1)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},

		o(local) {
			transition_out(fallback_slot, local);
			current = false;
		},

		d(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};
}

// (35:23) 
function create_if_block_1$1(ctx) {
	var current;

	const loading_slot_template = ctx.$$slots.loading;
	const loading_slot = create_slot(loading_slot_template, ctx, get_loading_slot_context$1);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},

		l(nodes) {
			if (loading_slot) loading_slot.l(nodes);
		},

		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (loading_slot && loading_slot.p && (changed.$$scope || changed.$data)) {
				loading_slot.p(
					get_slot_changes(loading_slot_template, ctx, changed, get_loading_slot_changes$1),
					get_slot_context(loading_slot_template, ctx, get_loading_slot_context$1)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},

		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},

		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (33:0) {#if $data}
function create_if_block$3(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, get_default_slot_context$2);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && (changed.$$scope || changed.$data)) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, get_default_slot_changes$2),
					get_slot_context(default_slot_template, ctx, get_default_slot_context$2)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$3(ctx) {
	var current_block_type_index, if_block, if_block_anchor, current;

	var if_block_creators = [
		create_if_block$3,
		create_if_block_1$1,
		create_else_block$2
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$data) return 0;
		if (ctx.data.loading) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},

		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o(local) {
			transition_out(if_block);
			current = false;
		},

		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let $data;

	let { path, query = null, traceId = '', log = false, startWith = undefined } = $$props;

    const data = collectionStore(path, query, { startWith, traceId, log }); component_subscribe($$self, data, $$value => { $data = $$value; $$invalidate('$data', $data); });

    const dispatch = createEventDispatcher();

    let unsub;

    onMount(() => {
        dispatch('ref', { ref: data.ref });

        unsub = data.subscribe(data => {
            dispatch('data', {
                data
            });
        });
    });

    onDestroy(() => unsub());

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('path' in $$props) $$invalidate('path', path = $$props.path);
		if ('query' in $$props) $$invalidate('query', query = $$props.query);
		if ('traceId' in $$props) $$invalidate('traceId', traceId = $$props.traceId);
		if ('log' in $$props) $$invalidate('log', log = $$props.log);
		if ('startWith' in $$props) $$invalidate('startWith', startWith = $$props.startWith);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		path,
		query,
		traceId,
		log,
		startWith,
		data,
		$data,
		$$slots,
		$$scope
	};
}

class Collection extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, ["path", "query", "traceId", "log", "startWith"]);
	}
}

export { Collection, Doc, FirebaseApp, User, collectionStore, docStore, userStore };
