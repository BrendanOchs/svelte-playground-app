'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var svelte = require('svelte');
var store = require('svelte/store');

function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function subscribe(store, callback) {
    const unsub = store.subscribe(callback);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, fn) {
    return definition[1]
        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))
        : ctx.$$scope.ctx;
}
function get_slot_changes(definition, ctx, changed, fn) {
    return definition[1]
        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))
        : ctx.$$scope.changed || {};
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function children(element) {
    return Array.from(element.childNodes);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function flush() {
    const seen_callbacks = new Set();
    do {
        // first, call beforeUpdate functions
        // and update components
        while (dirty_components.length) {
            const component = dirty_components.shift();
            set_current_component(component);
            update(component.$$);
        }
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                callback();
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
}
function update($$) {
    if ($$.fragment) {
        $$.update($$.dirty);
        run_all($$.before_update);
        $$.fragment.p($$.dirty, $$.ctx);
        $$.dirty = null;
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    if (component.$$.fragment) {
        run_all(component.$$.on_destroy);
        component.$$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        component.$$.on_destroy = component.$$.fragment = null;
        component.$$.ctx = {};
    }
}
function make_dirty(component, key) {
    if (!component.$$.dirty) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty = blank_object();
    }
    component.$$.dirty[key] = true;
}
function init(component, options, instance, create_fragment, not_equal, prop_names) {
    const parent_component = current_component;
    set_current_component(component);
    const props = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props: prop_names,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty: null
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, props, (key, ret, value = ret) => {
            if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {
                if ($$.bound[key])
                    $$.bound[key](value);
                if (ready)
                    make_dirty(component, key);
            }
            return ret;
        })
        : props;
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment($$.ctx);
    if (options.target) {
        if (options.hydrate) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.l(children(options.target));
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

/* src\FirebaseApp.svelte generated by Svelte v3.12.1 */

// (39:0) {#if ready}
function create_if_block(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, null),
					get_slot_context(default_slot_template, ctx, null)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	var if_block_anchor, current;

	var if_block = (ctx.ready) && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p(changed, ctx) {
			if (ctx.ready) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o(local) {
			transition_out(if_block);
			current = false;
		},

		d(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { firebase, perf = false, analytics = false } = $$props;

  // Ready required to use the app event,
  // prevents child components from running before init
  let ready = false;

  // Emit firebase
  const dispatch = svelte.createEventDispatcher();

    // Set firebase context
    $$invalidate('firebase', firebase = firebase || window.firebase);
    svelte.setContext("firebase", firebase);

  svelte.onMount(() => {
    if (!firebase) {
      throw Error(
        "No firebase app was provided. You must provide an initialized Firebase app or make it available globally."
      );
    } else {

      // Init perf and analytics
      perf && firebase.performance();
      analytics && firebase.analytics();

      // Optional event to set additional config
      dispatch("initializeApp", {
        firebase
      });

      $$invalidate('ready', ready = true);
    }
  });

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('firebase' in $$props) $$invalidate('firebase', firebase = $$props.firebase);
		if ('perf' in $$props) $$invalidate('perf', perf = $$props.perf);
		if ('analytics' in $$props) $$invalidate('analytics', analytics = $$props.analytics);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		firebase,
		perf,
		analytics,
		ready,
		$$slots,
		$$scope
	};
}

class FirebaseApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["firebase", "perf", "analytics"]);
	}
}

function getApp() {
  return svelte.getContext('firebase');
}

// Validates end-user has setup context and imported proper modules into the Svelte app
function assertApp(pkg) {

    const app = getApp();

    if (!app) {
      throw new Error(`Missing Firebase app in context. Are you inside a 'FirebaseApp' component?`)
    }

    if (pkg) {
        const pkgFn = app[pkg]; 
        if (!pkgFn || !pkgFn()) {
          throw new Error(`Firebase ${pkg} not found. You may be missing "import 'firebase/${pkg}'" `)
        } else {
          return pkgFn();
        }
    } else {
      return app;
    }
}

function userStore(opts = { persist: null }) {

    const auth = assertApp('auth');
    const k = 'sveltefire_user';
    let cached = null;
  
    const { persist } = opts;
  
    if (persist) {
      cached = JSON.parse(opts.persist.getItem(k));
    }
  
    const store$1 = store.writable(cached, () => {
      const teardown = auth.onAuthStateChanged(u => {
        set(u);
        persist && opts.persist.setItem(k, JSON.stringify(u));
      });
      return () => teardown;
    });
  
    const { subscribe, set } = store$1;
  
    return {
      subscribe,
      auth
    };
  }

/* src\User.svelte generated by Svelte v3.12.1 */

const get_after_slot_changes = ({ $store, store }) => ({ user: $store });
const get_after_slot_context = ({ $store, store }) => ({ user: $store, auth: store.auth });

const get_signed_out_slot_changes = ({ $store, store }) => ({ user: $store });
const get_signed_out_slot_context = ({ $store, store }) => ({ user: $store, auth: store.auth });

const get_default_slot_changes = ({ $store, store }) => ({ user: $store });
const get_default_slot_context = ({ $store, store }) => ({ user: $store, auth: store.auth });

const get_before_slot_changes = ({ $store, store }) => ({ user: $store });
const get_before_slot_context = ({ $store, store }) => ({ user: $store, auth: store.auth });

// (24:0) {:else}
function create_else_block(ctx) {
	var current;

	const signed_out_slot_template = ctx.$$slots["signed-out"];
	const signed_out_slot = create_slot(signed_out_slot_template, ctx, get_signed_out_slot_context);

	return {
		c() {
			if (signed_out_slot) signed_out_slot.c();
		},

		l(nodes) {
			if (signed_out_slot) signed_out_slot.l(nodes);
		},

		m(target, anchor) {
			if (signed_out_slot) {
				signed_out_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (signed_out_slot && signed_out_slot.p && (changed.$$scope || changed.$store)) {
				signed_out_slot.p(
					get_slot_changes(signed_out_slot_template, ctx, changed, get_signed_out_slot_changes),
					get_slot_context(signed_out_slot_template, ctx, get_signed_out_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(signed_out_slot, local);
			current = true;
		},

		o(local) {
			transition_out(signed_out_slot, local);
			current = false;
		},

		d(detaching) {
			if (signed_out_slot) signed_out_slot.d(detaching);
		}
	};
}

// (22:0) {#if $store}
function create_if_block$1(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && (changed.$$scope || changed.$store)) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, get_default_slot_changes),
					get_slot_context(default_slot_template, ctx, get_default_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	var t0, current_block_type_index, if_block, t1, current;

	const before_slot_template = ctx.$$slots.before;
	const before_slot = create_slot(before_slot_template, ctx, get_before_slot_context);

	var if_block_creators = [
		create_if_block$1,
		create_else_block
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$store) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const after_slot_template = ctx.$$slots.after;
	const after_slot = create_slot(after_slot_template, ctx, get_after_slot_context);

	return {
		c() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();

			if (after_slot) after_slot.c();
		},

		l(nodes) {
			if (before_slot) before_slot.l(nodes);

			if (after_slot) after_slot.l(nodes);
		},

		m(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (before_slot && before_slot.p && (changed.$$scope || changed.$store)) {
				before_slot.p(
					get_slot_changes(before_slot_template, ctx, changed, get_before_slot_changes),
					get_slot_context(before_slot_template, ctx, get_before_slot_context)
				);
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			if (after_slot && after_slot.p && (changed.$$scope || changed.$store)) {
				after_slot.p(
					get_slot_changes(after_slot_template, ctx, changed, get_after_slot_changes),
					get_slot_context(after_slot_template, ctx, get_after_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block);
			transition_in(after_slot, local);
			current = true;
		},

		o(local) {
			transition_out(before_slot, local);
			transition_out(if_block);
			transition_out(after_slot, local);
			current = false;
		},

		d(detaching) {
			if (before_slot) before_slot.d(detaching);

			if (detaching) {
				detach(t0);
			}

			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(t1);
			}

			if (after_slot) after_slot.d(detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let $store;

	let { persist = null } = $$props;

  let store = userStore({ persist }); component_subscribe($$self, store, $$value => { $store = $$value; $$invalidate('$store', $store); });

  const dispatch = svelte.createEventDispatcher();
  let unsub;
  svelte.onMount(() => {
    unsub = store.subscribe(user => {
      dispatch("user", {
        user
      });
    });
  });

  svelte.onDestroy(() => unsub());

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('persist' in $$props) $$invalidate('persist', persist = $$props.persist);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { persist, store, $store, $$slots, $$scope };
}

class User extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["persist"]);
	}
}

function startTrace(name) {
    const perf = assertApp('performance');
    const trace = perf.trace(name);
    trace.start();
    return trace;
  }
  
  async function stopTrace(trace) {
    if (trace.state === 2) {
      trace.stop();
    }
  
    return null;
  }

// Svelte Store for Firestore Document
function docStore(path, opts) {
  const firestore = assertApp('firestore');

  const { startWith, log, traceId, maxWait, once } = { maxWait: 10000, ...opts };

  // Create the Firestore Reference
  const ref = typeof path === 'string' ? firestore.doc(path) : path;

  // Performance trace
  const trace = traceId && startTrace(traceId);

  // Internal state
  let _loading = typeof startWith !== undefined;
  let _firstValue = true;
  let _error = null;
  let _teardown;
  let _waitForIt;


  // State should never change without emitting a new value
  // Clears loading state on first call
  const next = (val, err) => {
    _loading = false; 
    _firstValue = false;
    _waitForIt && clearTimeout(_waitForIt);
    _error = err || null;
    set(val);
    trace && stopTrace(trace);
  };

  // Timout
  // Runs of first subscription
  const start = () => {

    // Timout for fallback slot
    _waitForIt = maxWait && setTimeout(() => _loading && next(null, new Error(`Timeout at ${maxWait}. Using fallback slot.`) ), maxWait);

    // Realtime firebase subscription
    _teardown = ref.onSnapshot(
      snapshot => {
        const data = snapshot.data() || (_firstValue && startWith) || null;

        // Optional logging
        if (log) {
          console.groupCollapsed(`Doc ${snapshot.id}`);
          console.log(`Path: ${ref.path}`);
          console.log('Snapshot:', snapshot);
          console.groupEnd();
        }

        // Emit next value
        next(data);

        // Teardown after first emitted value if once
        once && _teardown();
      },

      // Handle firebase thrown errors
      error => {
        console.error(error);
        next(null, error);
      }
    );

    // Removes firebase listener when store completes
    return () => _teardown();
  };

  // Svelte store
  const store$1 = store.writable(startWith, start);
  const { subscribe, set } = store$1;

  return {
    subscribe,
    firestore,
    ref,
    get loading() {
      return _loading;
    },
    get error() {
      return _error;
    }
  };
}

// Svelte Store for Firestore Collection
function collectionStore(path, queryFn, opts) {
  const firestore = assertApp('firestore');

  const { startWith, log, traceId, maxWait, once, idField, refField } = {
    idField: 'id',
    refField: 'ref',
    maxWait: 10000,
    ...opts
  };

  const ref = typeof path === 'string' ? firestore.collection(path) : path;
  const query = queryFn && queryFn(ref);
  const trace = traceId && startTrace(traceId);

  let _loading = typeof startWith !== undefined;
  let _error = null;
  let _meta = {};
  let _teardown;
  let _waitForIt;

  // Metadata for result
  const calcMeta = (val) => {
    return val && val.length ? 
      { first: val[0], last: val[val.length - 1] } : {}
  };

  const next = (val, err) => {
    _loading = false; 
    _waitForIt && clearTimeout(_waitForIt);
    _error = err || null;
    _meta = calcMeta(val);
    set(val);
    trace && stopTrace(trace);
  };

  const start = () => {
    _waitForIt = maxWait && setTimeout(() => _loading && next(null, new Error(`Timeout at ${maxWait}. Using fallback slot.`) ), maxWait);

    _teardown = (query || ref).onSnapshot(
      snapshot => {

        // Will always return an array
        const data = snapshot.docs.map(docSnap => ({
          ...docSnap.data(),
          // Allow end user override fields mapped for ID and Ref
          ...(idField ? { [idField]: docSnap.id } : null),
          ...(refField ? { [refField]: docSnap.ref } : null)
        }));

        if (log) {
          const type = _loading ? 'New Query' : 'Updated Query';
          console.groupCollapsed(`${type} ${ref.id} | ${data.length} hits`);
          console.log(`${ref.path}`);
          console.log(`Snapshot: `, snapshot);
          console.groupEnd();
        }
        next(data);
        once && _teardown();
      },

      error => {
        console.error(error);
        next(null, error);
      }
    );

    return () => _teardown();
  };

  const store$1 = store.writable(startWith, start);
  const { subscribe, set } = store$1;

  return {
    subscribe,
    firestore,
    ref,
    get loading() {
      return _loading;
    },
    get error() {
      return _error;
    },
    get meta() {
      return _meta;
    }
  };
}

/* src\Doc.svelte generated by Svelte v3.12.1 */

const get_after_slot_changes$1 = ({ $store, store }) => ({ data: $store, ref: store, error: store });
const get_after_slot_context$1 = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error
});

const get_fallback_slot_changes = ({ $store, store }) => ({ data: $store, ref: store, error: store });
const get_fallback_slot_context = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error
});

const get_loading_slot_changes = ({ $store, store }) => ({ data: $store, ref: store, error: store });
const get_loading_slot_context = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error
});

const get_default_slot_changes$1 = ({ $store, store }) => ({ data: $store, ref: store, error: store });
const get_default_slot_context$1 = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error
});

const get_before_slot_changes$1 = ({ $store, store }) => ({ data: $store, ref: store, error: store });
const get_before_slot_context$1 = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error
});

// (52:0) {:else}
function create_else_block$1(ctx) {
	var current;

	const fallback_slot_template = ctx.$$slots.fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, get_fallback_slot_context);

	return {
		c() {
			if (fallback_slot) fallback_slot.c();
		},

		l(nodes) {
			if (fallback_slot) fallback_slot.l(nodes);
		},

		m(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (fallback_slot && fallback_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				fallback_slot.p(
					get_slot_changes(fallback_slot_template, ctx, changed, get_fallback_slot_changes),
					get_slot_context(fallback_slot_template, ctx, get_fallback_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},

		o(local) {
			transition_out(fallback_slot, local);
			current = false;
		},

		d(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};
}

// (50:24) 
function create_if_block_1(ctx) {
	var current;

	const loading_slot_template = ctx.$$slots.loading;
	const loading_slot = create_slot(loading_slot_template, ctx, get_loading_slot_context);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},

		l(nodes) {
			if (loading_slot) loading_slot.l(nodes);
		},

		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (loading_slot && loading_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				loading_slot.p(
					get_slot_changes(loading_slot_template, ctx, changed, get_loading_slot_changes),
					get_slot_context(loading_slot_template, ctx, get_loading_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},

		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},

		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (48:0) {#if $store}
function create_if_block$2(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, get_default_slot_context$1);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, get_default_slot_changes$1),
					get_slot_context(default_slot_template, ctx, get_default_slot_context$1)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$2(ctx) {
	var t0, current_block_type_index, if_block, t1, current;

	const before_slot_template = ctx.$$slots.before;
	const before_slot = create_slot(before_slot_template, ctx, get_before_slot_context$1);

	var if_block_creators = [
		create_if_block$2,
		create_if_block_1,
		create_else_block$1
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$store) return 0;
		if (ctx.store.loading) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const after_slot_template = ctx.$$slots.after;
	const after_slot = create_slot(after_slot_template, ctx, get_after_slot_context$1);

	return {
		c() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();

			if (after_slot) after_slot.c();
		},

		l(nodes) {
			if (before_slot) before_slot.l(nodes);

			if (after_slot) after_slot.l(nodes);
		},

		m(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (before_slot && before_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				before_slot.p(
					get_slot_changes(before_slot_template, ctx, changed, get_before_slot_changes$1),
					get_slot_context(before_slot_template, ctx, get_before_slot_context$1)
				);
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			if (after_slot && after_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				after_slot.p(
					get_slot_changes(after_slot_template, ctx, changed, get_after_slot_changes$1),
					get_slot_context(after_slot_template, ctx, get_after_slot_context$1)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block);
			transition_in(after_slot, local);
			current = true;
		},

		o(local) {
			transition_out(before_slot, local);
			transition_out(if_block);
			transition_out(after_slot, local);
			current = false;
		},

		d(detaching) {
			if (before_slot) before_slot.d(detaching);

			if (detaching) {
				detach(t0);
			}

			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(t1);
			}

			if (after_slot) after_slot.d(detaching);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let $store, $$unsubscribe_store = noop, $$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => { $store = $$value; $$invalidate('$store', $store); }), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());

	let { path, log = false, traceId = "", startWith = undefined, maxWait = 10000, once = false } = $$props;

  const opts = {
    startWith,
    traceId,
    log,
    maxWait,
    once
  };

  let store = docStore(path, opts); $$subscribe_store();

  const dispatch = svelte.createEventDispatcher();

  let unsub;

  svelte.onMount(() => dispatch("ref", { ref: store.ref }));
  svelte.onDestroy(() => unsub());

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('path' in $$props) $$invalidate('path', path = $$props.path);
		if ('log' in $$props) $$invalidate('log', log = $$props.log);
		if ('traceId' in $$props) $$invalidate('traceId', traceId = $$props.traceId);
		if ('startWith' in $$props) $$invalidate('startWith', startWith = $$props.startWith);
		if ('maxWait' in $$props) $$invalidate('maxWait', maxWait = $$props.maxWait);
		if ('once' in $$props) $$invalidate('once', once = $$props.once);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$$.update = ($$dirty = { unsub: 1, path: 1, store: 1 }) => {
		if ($$dirty.unsub || $$dirty.path || $$dirty.store) { {
        if (unsub) {
          // Unsub and create new store
          unsub();
          $$subscribe_store($$invalidate('store', store = docStore(path, opts)));
          dispatch("ref", { ref: store.ref });
        }
    
        $$invalidate('unsub', unsub = store.subscribe(data => {
          dispatch("data", {
            data
          });
        }));
      } }
	};

	return {
		path,
		log,
		traceId,
		startWith,
		maxWait,
		once,
		store,
		$store,
		$$slots,
		$$scope
	};
}

class Doc extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, ["path", "log", "traceId", "startWith", "maxWait", "once"]);
	}
}

/* src\Collection.svelte generated by Svelte v3.12.1 */

const get_after_slot_changes$2 = ({ $store, store }) => ({
	data: $store,
	ref: store,
	error: store,
	first: store,
	last: store
});
const get_after_slot_context$2 = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error,
	first: store.meta.first,
	last: store.meta.last
});

const get_fallback_slot_changes$1 = ({ $store, store }) => ({
	data: $store,
	ref: store,
	error: store,
	first: store,
	last: store
});
const get_fallback_slot_context$1 = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error,
	first: store.meta.first,
	last: store.meta.last
});

const get_loading_slot_changes$1 = ({ $store, store }) => ({
	data: $store,
	ref: store,
	error: store,
	first: store,
	last: store
});
const get_loading_slot_context$1 = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error,
	first: store.meta.first,
	last: store.meta.last
});

const get_default_slot_changes$2 = ({ $store, store }) => ({
	data: $store,
	ref: store,
	error: store,
	first: store,
	last: store
});
const get_default_slot_context$2 = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error,
	first: store.meta.first,
	last: store.meta.last
});

const get_before_slot_changes$2 = ({ $store, store }) => ({
	data: $store,
	ref: store,
	error: store,
	first: store,
	last: store
});
const get_before_slot_context$2 = ({ $store, store }) => ({
	data: $store,
	ref: store.ref,
	error: store.error,
	first: store.meta.first,
	last: store.meta.last
});

// (52:0) {:else}
function create_else_block$2(ctx) {
	var current;

	const fallback_slot_template = ctx.$$slots.fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, get_fallback_slot_context$1);

	return {
		c() {
			if (fallback_slot) fallback_slot.c();
		},

		l(nodes) {
			if (fallback_slot) fallback_slot.l(nodes);
		},

		m(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (fallback_slot && fallback_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				fallback_slot.p(
					get_slot_changes(fallback_slot_template, ctx, changed, get_fallback_slot_changes$1),
					get_slot_context(fallback_slot_template, ctx, get_fallback_slot_context$1)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},

		o(local) {
			transition_out(fallback_slot, local);
			current = false;
		},

		d(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};
}

// (50:24) 
function create_if_block_1$1(ctx) {
	var current;

	const loading_slot_template = ctx.$$slots.loading;
	const loading_slot = create_slot(loading_slot_template, ctx, get_loading_slot_context$1);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},

		l(nodes) {
			if (loading_slot) loading_slot.l(nodes);
		},

		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (loading_slot && loading_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				loading_slot.p(
					get_slot_changes(loading_slot_template, ctx, changed, get_loading_slot_changes$1),
					get_slot_context(loading_slot_template, ctx, get_loading_slot_context$1)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},

		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},

		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (48:0) {#if $store}
function create_if_block$3(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, get_default_slot_context$2);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, get_default_slot_changes$2),
					get_slot_context(default_slot_template, ctx, get_default_slot_context$2)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$3(ctx) {
	var t0, current_block_type_index, if_block, t1, current;

	const before_slot_template = ctx.$$slots.before;
	const before_slot = create_slot(before_slot_template, ctx, get_before_slot_context$2);

	var if_block_creators = [
		create_if_block$3,
		create_if_block_1$1,
		create_else_block$2
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$store) return 0;
		if (ctx.store.loading) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const after_slot_template = ctx.$$slots.after;
	const after_slot = create_slot(after_slot_template, ctx, get_after_slot_context$2);

	return {
		c() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();

			if (after_slot) after_slot.c();
		},

		l(nodes) {
			if (before_slot) before_slot.l(nodes);

			if (after_slot) after_slot.l(nodes);
		},

		m(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (before_slot && before_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				before_slot.p(
					get_slot_changes(before_slot_template, ctx, changed, get_before_slot_changes$2),
					get_slot_context(before_slot_template, ctx, get_before_slot_context$2)
				);
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			if (after_slot && after_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				after_slot.p(
					get_slot_changes(after_slot_template, ctx, changed, get_after_slot_changes$2),
					get_slot_context(after_slot_template, ctx, get_after_slot_context$2)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block);
			transition_in(after_slot, local);
			current = true;
		},

		o(local) {
			transition_out(before_slot, local);
			transition_out(if_block);
			transition_out(after_slot, local);
			current = false;
		},

		d(detaching) {
			if (before_slot) before_slot.d(detaching);

			if (detaching) {
				detach(t0);
			}

			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(t1);
			}

			if (after_slot) after_slot.d(detaching);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let $store, $$unsubscribe_store = noop, $$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => { $store = $$value; $$invalidate('$store', $store); }), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());

	let { path, query = null, traceId = "", log = false, startWith = undefined, maxWait = 10000, once = false } = $$props;

  const opts = {
    startWith,
    traceId,
    log,
    maxWait,
    once
  };

  let store = collectionStore(path, query, opts); $$subscribe_store();

  const dispatch = svelte.createEventDispatcher();

  let unsub;

  svelte.onMount(() => dispatch("ref", { ref: store.ref }));
  svelte.onDestroy(() => unsub());

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('path' in $$props) $$invalidate('path', path = $$props.path);
		if ('query' in $$props) $$invalidate('query', query = $$props.query);
		if ('traceId' in $$props) $$invalidate('traceId', traceId = $$props.traceId);
		if ('log' in $$props) $$invalidate('log', log = $$props.log);
		if ('startWith' in $$props) $$invalidate('startWith', startWith = $$props.startWith);
		if ('maxWait' in $$props) $$invalidate('maxWait', maxWait = $$props.maxWait);
		if ('once' in $$props) $$invalidate('once', once = $$props.once);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$$.update = ($$dirty = { unsub: 1, path: 1, query: 1, store: 1 }) => {
		if ($$dirty.unsub || $$dirty.path || $$dirty.query || $$dirty.store) { {
        if (unsub) {
          unsub();
          $$subscribe_store($$invalidate('store', store = collectionStore(path, query, opts)));
          dispatch("ref", { ref: store.ref });
        }
    
        $$invalidate('unsub', unsub = store.subscribe(data => {
          dispatch("data", {
            data
          });
        }));
      } }
	};

	return {
		path,
		query,
		traceId,
		log,
		startWith,
		maxWait,
		once,
		store,
		$store,
		$$slots,
		$$scope
	};
}

class Collection extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, ["path", "query", "traceId", "log", "startWith", "maxWait", "once"]);
	}
}

// Svelte Store for Storage file
function fileDownloadStore(path, opts) {
  const storage = assertApp('storage');

  const { log, traceId, startWith, url, meta, } = { url: true, ...opts };

  const storageRef = storage.ref();
  const ref = typeof path === 'string' ? storageRef.child(path) : path;

  // Performance trace
  const trace = traceId && startTrace(traceId);

  // Internal state
  let _loading = typeof startWith !== undefined;
  let _error = null;

  // State should never change without emitting a new value
  // Clears loading state on first call
  const next = (val, err) => {
    _loading = false; 
    _error = err || null;
    set(val);
    trace && stopTrace(trace);
  };

  // Timout
  // Runs of first subscription
    const start = async() => {

      const requests = [url && ref.getDownloadURL(), meta && ref.getMetadata()];

      Promise.all(requests)
              .then(result => next({
                url: result[0],
                metadata: result[1]
              }))
              .catch(e => next(null, e));

    };


  // Svelte store
  const store$1 = store.writable(startWith, start);
  const { subscribe, set } = store$1;

  return {
    subscribe,
    storage,
    ref,
    get loading() {
      return _loading;
    },
    get error() {
      return _error;
    }
  };
}

function uploadTaskStore(path, file, opts) {
  const storage = assertApp('storage');

  const { log, traceId } = { ...opts };

  const storageRef = storage.ref();
  
  const ref = typeof path === 'string' ? storageRef.child(path) : path;

  // Performance trace
  const trace = traceId && startTrace(traceId);

  // Internal state
  let _error = null;
  let _url = ''; // download url
  let _task; // upload task

  // Emits UploadTaskSnapshot
  const next = (val, err) => {
    _error = err || null;
    set(val);
  };

  const start = () => {
    _task = ref.put(file);

    const _teardown = _task.on('state_changed', {
      next: (snap) => next(snap),
      error: (e) => next(_task.snapshot, e),
      complete: () => {
        console.log('done');
        ref.getDownloadURL().then(url => {
          next(_task.snapshot);
          _url = url;
          if (log) console.log(`Upload Complete: ${url}`);
          trace && stopTrace(trace);
        });
      }
    });

    return () => _teardown();
  };

  const store$1 = store.writable(null, start);
  const { subscribe, set } = store$1;

  return {
    subscribe,
    storage,
    ref,
    get downloadURL() {
      return _url;
    },
    get task() {
      return _task;
    },
    get error() {
      return _error;
    },
  };
}

/* src\StorageRef.svelte generated by Svelte v3.12.1 */

const get_after_slot_changes$3 = ({ $store, store }) => ({
	downloadURL: $store,
	metadata: $store,
	ref: store,
	error: store
});
const get_after_slot_context$3 = ({ $store, store }) => ({
	downloadURL: $store && $store.url,
	metadata: $store && $store.metadata,
	ref: store.ref,
	error: store.error
});

const get_fallback_slot_changes$2 = ({ $store, store }) => ({
	downloadURL: $store,
	metadata: $store,
	ref: store,
	error: store
});
const get_fallback_slot_context$2 = ({ $store, store }) => ({
	downloadURL: $store && $store.url,
	metadata: $store && $store.metadata,
	ref: store.ref,
	error: store.error
});

const get_loading_slot_changes$2 = ({ $store, store }) => ({
	downloadURL: $store,
	metadata: $store,
	ref: store,
	error: store
});
const get_loading_slot_context$2 = ({ $store, store }) => ({
	downloadURL: $store && $store.url,
	metadata: $store && $store.metadata,
	ref: store.ref,
	error: store.error
});

const get_default_slot_changes$3 = ({ $store, store }) => ({
	downloadURL: $store,
	metadata: $store,
	ref: store,
	error: store
});
const get_default_slot_context$3 = ({ $store, store }) => ({
	downloadURL: $store && $store.url,
	metadata: $store && $store.metadata,
	ref: store.ref,
	error: store.error
});

const get_before_slot_changes$3 = ({ $store, store }) => ({
	downloadURL: $store,
	metadata: $store,
	ref: store,
	error: store
});
const get_before_slot_context$3 = ({ $store, store }) => ({
	downloadURL: $store && $store.url,
	metadata: $store && $store.metadata,
	ref: store.ref,
	error: store.error
});

// (60:0) {:else}
function create_else_block$3(ctx) {
	var current;

	const fallback_slot_template = ctx.$$slots.fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, get_fallback_slot_context$2);

	return {
		c() {
			if (fallback_slot) fallback_slot.c();
		},

		l(nodes) {
			if (fallback_slot) fallback_slot.l(nodes);
		},

		m(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (fallback_slot && fallback_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				fallback_slot.p(
					get_slot_changes(fallback_slot_template, ctx, changed, get_fallback_slot_changes$2),
					get_slot_context(fallback_slot_template, ctx, get_fallback_slot_context$2)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},

		o(local) {
			transition_out(fallback_slot, local);
			current = false;
		},

		d(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};
}

// (58:24) 
function create_if_block_1$2(ctx) {
	var current;

	const loading_slot_template = ctx.$$slots.loading;
	const loading_slot = create_slot(loading_slot_template, ctx, get_loading_slot_context$2);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},

		l(nodes) {
			if (loading_slot) loading_slot.l(nodes);
		},

		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (loading_slot && loading_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				loading_slot.p(
					get_slot_changes(loading_slot_template, ctx, changed, get_loading_slot_changes$2),
					get_slot_context(loading_slot_template, ctx, get_loading_slot_context$2)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},

		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},

		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (52:0) {#if $store}
function create_if_block$4(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, get_default_slot_context$3);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, get_default_slot_changes$3),
					get_slot_context(default_slot_template, ctx, get_default_slot_context$3)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$4(ctx) {
	var t0, current_block_type_index, if_block, t1, current;

	const before_slot_template = ctx.$$slots.before;
	const before_slot = create_slot(before_slot_template, ctx, get_before_slot_context$3);

	var if_block_creators = [
		create_if_block$4,
		create_if_block_1$2,
		create_else_block$3
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$store) return 0;
		if (ctx.store.loading) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const after_slot_template = ctx.$$slots.after;
	const after_slot = create_slot(after_slot_template, ctx, get_after_slot_context$3);

	return {
		c() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();

			if (after_slot) after_slot.c();
		},

		l(nodes) {
			if (before_slot) before_slot.l(nodes);

			if (after_slot) after_slot.l(nodes);
		},

		m(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (before_slot && before_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				before_slot.p(
					get_slot_changes(before_slot_template, ctx, changed, get_before_slot_changes$3),
					get_slot_context(before_slot_template, ctx, get_before_slot_context$3)
				);
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			if (after_slot && after_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				after_slot.p(
					get_slot_changes(after_slot_template, ctx, changed, get_after_slot_changes$3),
					get_slot_context(after_slot_template, ctx, get_after_slot_context$3)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block);
			transition_in(after_slot, local);
			current = true;
		},

		o(local) {
			transition_out(before_slot, local);
			transition_out(if_block);
			transition_out(after_slot, local);
			current = false;
		},

		d(detaching) {
			if (before_slot) before_slot.d(detaching);

			if (detaching) {
				detach(t0);
			}

			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(t1);
			}

			if (after_slot) after_slot.d(detaching);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let $store, $$unsubscribe_store = noop, $$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => { $store = $$value; $$invalidate('$store', $store); }), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());

	let { path = "", log = false, traceId = "", startWith = undefined, url = true, meta = false } = $$props;

  const opts = {
    startWith,
    traceId,
    log,
    meta,
    url,
  };

  let store = fileDownloadStore(path, opts); $$subscribe_store();

  const dispatch = svelte.createEventDispatcher();

  let unsub;

  svelte.onMount(() => dispatch("ref", { ref: store.ref }));
  svelte.onDestroy(() => unsub());

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('path' in $$props) $$invalidate('path', path = $$props.path);
		if ('log' in $$props) $$invalidate('log', log = $$props.log);
		if ('traceId' in $$props) $$invalidate('traceId', traceId = $$props.traceId);
		if ('startWith' in $$props) $$invalidate('startWith', startWith = $$props.startWith);
		if ('url' in $$props) $$invalidate('url', url = $$props.url);
		if ('meta' in $$props) $$invalidate('meta', meta = $$props.meta);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$$.update = ($$dirty = { unsub: 1, path: 1, store: 1 }) => {
		if ($$dirty.unsub || $$dirty.path || $$dirty.store) { {
        if (unsub) {
          // Unsub and create new store
          unsub();
          $$subscribe_store($$invalidate('store', store = fileDownloadStore(path, opts)));
          dispatch("ref", { ref: store.ref });
        }
    
        $$invalidate('unsub', unsub = store.subscribe(result => {
         if (result) {
          dispatch("storageResult", {
            downloadURL: result[0],
            metadata: result[1],
          });
         }
    
        }));
      } }
	};

	return {
		path,
		log,
		traceId,
		startWith,
		url,
		meta,
		store,
		$store,
		$$slots,
		$$scope
	};
}

class StorageRef extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, ["path", "log", "traceId", "startWith", "url", "meta"]);
	}
}

/* src\UploadTask.svelte generated by Svelte v3.12.1 */

const get_after_slot_changes$4 = ({ $store, store }) => ({
	snapshot: $store,
	ref: store,
	task: store,
	downloadURL: store,
	error: store
});
const get_after_slot_context$4 = ({ $store, store }) => ({
	snapshot: $store,
	ref: store.ref,
	task: store.task,
	downloadURL: store.downloadURL,
	error: store.error
});

const get_complete_slot_changes = ({ $store, store }) => ({
	snapshot: $store,
	ref: store,
	task: store,
	downloadURL: store,
	error: store
});
const get_complete_slot_context = ({ $store, store }) => ({
	snapshot: $store,
	ref: store.ref,
	task: store.task,
	downloadURL: store.downloadURL,
	error: store.error
});

const get_fallback_slot_changes$3 = ({ $store, store }) => ({
	snapshot: $store,
	ref: store,
	task: store,
	downloadURL: store,
	error: store
});
const get_fallback_slot_context$3 = ({ $store, store }) => ({
	snapshot: $store,
	ref: store.ref,
	task: store.task,
	downloadURL: store.downloadURL,
	error: store.error
});

const get_default_slot_changes$4 = ({ $store, store }) => ({
	snapshot: $store,
	ref: store,
	task: store,
	downloadURL: store,
	error: store
});
const get_default_slot_context$4 = ({ $store, store }) => ({
	snapshot: $store,
	ref: store.ref,
	task: store.task,
	downloadURL: store.downloadURL,
	error: store.error
});

const get_before_slot_changes$4 = ({ $store, store }) => ({
	snapshot: $store,
	ref: store,
	task: store,
	downloadURL: store,
	error: store
});
const get_before_slot_context$4 = ({ $store, store }) => ({
	snapshot: $store,
	ref: store.ref,
	task: store.task,
	downloadURL: store.downloadURL,
	error: store.error
});

// (50:0) {:else}
function create_else_block$4(ctx) {
	var current;

	const fallback_slot_template = ctx.$$slots.fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, get_fallback_slot_context$3);

	return {
		c() {
			if (fallback_slot) fallback_slot.c();
		},

		l(nodes) {
			if (fallback_slot) fallback_slot.l(nodes);
		},

		m(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (fallback_slot && fallback_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				fallback_slot.p(
					get_slot_changes(fallback_slot_template, ctx, changed, get_fallback_slot_changes$3),
					get_slot_context(fallback_slot_template, ctx, get_fallback_slot_context$3)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},

		o(local) {
			transition_out(fallback_slot, local);
			current = false;
		},

		d(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};
}

// (43:0) {#if $store}
function create_if_block_1$3(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, get_default_slot_context$4);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, get_default_slot_changes$4),
					get_slot_context(default_slot_template, ctx, get_default_slot_context$4)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (54:0) {#if store.downloadURL}
function create_if_block$5(ctx) {
	var current;

	const complete_slot_template = ctx.$$slots.complete;
	const complete_slot = create_slot(complete_slot_template, ctx, get_complete_slot_context);

	return {
		c() {
			if (complete_slot) complete_slot.c();
		},

		l(nodes) {
			if (complete_slot) complete_slot.l(nodes);
		},

		m(target, anchor) {
			if (complete_slot) {
				complete_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (complete_slot && complete_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				complete_slot.p(
					get_slot_changes(complete_slot_template, ctx, changed, get_complete_slot_changes),
					get_slot_context(complete_slot_template, ctx, get_complete_slot_context)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(complete_slot, local);
			current = true;
		},

		o(local) {
			transition_out(complete_slot, local);
			current = false;
		},

		d(detaching) {
			if (complete_slot) complete_slot.d(detaching);
		}
	};
}

function create_fragment$5(ctx) {
	var t0, current_block_type_index, if_block0, t1, t2, current;

	const before_slot_template = ctx.$$slots.before;
	const before_slot = create_slot(before_slot_template, ctx, get_before_slot_context$4);

	var if_block_creators = [
		create_if_block_1$3,
		create_else_block$4
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$store) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	var if_block1 = (ctx.store.downloadURL) && create_if_block$5(ctx);

	const after_slot_template = ctx.$$slots.after;
	const after_slot = create_slot(after_slot_template, ctx, get_after_slot_context$4);

	return {
		c() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();

			if (after_slot) after_slot.c();
		},

		l(nodes) {
			if (before_slot) before_slot.l(nodes);

			if (after_slot) after_slot.l(nodes);
		},

		m(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (before_slot && before_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				before_slot.p(
					get_slot_changes(before_slot_template, ctx, changed, get_before_slot_changes$4),
					get_slot_context(before_slot_template, ctx, get_before_slot_context$4)
				);
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block0 = if_blocks[current_block_type_index];
				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}
				transition_in(if_block0, 1);
				if_block0.m(t1.parentNode, t1);
			}

			if (ctx.store.downloadURL) {
				if (if_block1) {
					if_block1.p(changed, ctx);
					transition_in(if_block1, 1);
				} else {
					if_block1 = create_if_block$5(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();
				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});
				check_outros();
			}

			if (after_slot && after_slot.p && (changed.$$scope || changed.$store || changed.store)) {
				after_slot.p(
					get_slot_changes(after_slot_template, ctx, changed, get_after_slot_changes$4),
					get_slot_context(after_slot_template, ctx, get_after_slot_context$4)
				);
			}
		},

		i(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(after_slot, local);
			current = true;
		},

		o(local) {
			transition_out(before_slot, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(after_slot, local);
			current = false;
		},

		d(detaching) {
			if (before_slot) before_slot.d(detaching);

			if (detaching) {
				detach(t0);
			}

			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(t1);
			}

			if (if_block1) if_block1.d(detaching);

			if (detaching) {
				detach(t2);
			}

			if (after_slot) after_slot.d(detaching);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let $store, $$unsubscribe_store = noop, $$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => { $store = $$value; $$invalidate('$store', $store); }), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());

	let { path, file, log = false, traceId = "" } = $$props;

  const opts = {
    traceId,
    log,
  };

  let store = uploadTaskStore(path, file, opts); $$subscribe_store();

  const dispatch = svelte.createEventDispatcher();

  let unsub;

  svelte.onMount(() => dispatch("ref", { ref: store.ref }));
  svelte.onDestroy(() => unsub());

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('path' in $$props) $$invalidate('path', path = $$props.path);
		if ('file' in $$props) $$invalidate('file', file = $$props.file);
		if ('log' in $$props) $$invalidate('log', log = $$props.log);
		if ('traceId' in $$props) $$invalidate('traceId', traceId = $$props.traceId);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$$.update = ($$dirty = { unsub: 1, path: 1, file: 1, store: 1 }) => {
		if ($$dirty.unsub || $$dirty.path || $$dirty.file || $$dirty.store) { {
        if (unsub) {
          // Unsub and create new store
          unsub();
          $$subscribe_store($$invalidate('store', store = uploadTaskStore(path, file, opts)));
          dispatch("ref", { ref: store.ref });
        }
    
        $$invalidate('unsub', unsub = store.subscribe(snapshot => {
          dispatch("snapshot", {
            snapshot
          });
        }));
      } }
	};

	return {
		path,
		file,
		log,
		traceId,
		store,
		$store,
		$$slots,
		$$scope
	};
}

class UploadTask extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, ["path", "file", "log", "traceId"]);
	}
}

exports.Collection = Collection;
exports.Doc = Doc;
exports.FirebaseApp = FirebaseApp;
exports.StorageRef = StorageRef;
exports.UploadTask = UploadTask;
exports.User = User;
exports.collectionStore = collectionStore;
exports.docStore = docStore;
exports.fileDownloadStore = fileDownloadStore;
exports.uploadTaskStore = uploadTaskStore;
exports.userStore = userStore;
